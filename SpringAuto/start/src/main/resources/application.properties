spring.datasource.username=root
spring.datasource.password=
spring.datasource.url=jdbc:mysql://localhost:3306/test?useUnicode=true&characterEncoding=utf-8&useSSL=true&serverTimezone=UTC
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

spring.application.name=SpringAuto

management.endpoints.jmx.exposure.include=*
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always


# spring cloud access&secret config
# 可以访问如下地址查看: https://usercenter.console.aliyun.com/#/manage/ak
alibaba.cloud.access-key=****
alibaba.cloud.secret-key=****

mybatis.mapper-locations=classpath:mapper/*Mapper.xml
mybatis.type-aliases-package=com.SpringAuto.dao

# 应用服务 WEB 访问端口
server.port=8080
# Actuator Web 访问端口
management.server.port=8081

## Redis控制台: https://kvstorenext.console.aliyun.com

# Redis数据库索引（默认为0）
spring.redis.database=0
# Redis服务器地址
spring.redis.host=127.0.0.1
# Redis服务器连接端口
spring.redis.port=6379
# Redis服务器连接密码（默认为空）
spring.redis.password=
# 连接池最大连接数（使用负值表示没有限制）
spring.redis.pool.max-active=8
# 连接池最大阻塞等待时间（使用负值表示没有限制）
spring.redis.pool.max-wait=-1
# 连接池中的最大空闲连接
spring.redis.pool.max-idle=8
# 连接池中的最小空闲连接
spring.redis.pool.min-idle=0
# 连接超时时间（毫秒）
spring.redis.timeout=1200
## 控制台: https://ons.console.aliyun.com
## Spring Cloud Alibaba RocketMQ 文档：https://github.com/alibaba/spring-cloud-alibaba/blob/master/spring-cloud-alibaba-docs/src/main/asciidoc-zh/rocketmq.adoc
## RocketMQ 帮助文档：https://help.aliyun.com/product/29530.html

########## RocketMQ 通用配置
# 客户端接入点，必填
spring.cloud.stream.rocketmq.binder.name-server=127.0.0.1:9876
# 阿里云账号 AccessKey，默认为空；如果使用aliyun提供的rocketmq服务，该值必填
spring.cloud.stream.rocketmq.binder.access-key=
# 阿里云账号 SecretKey，默认为空；如果使用aliyun提供的rocketmq服务，该值必填
spring.cloud.stream.rocketmq.binder.secret-key=
# 日志级别
logging.level.com.alibaba.cloud.stream.binder.rocketmq=INFO

########## Consumer Config
# input1 的配置：
spring.cloud.stream.bindings.input1.destination=test-topic
spring.cloud.stream.bindings.input1.content-type=text/plain
spring.cloud.stream.bindings.input1.group=test-group1
# Consumer 是否同步消费消息模式。默认为false
spring.cloud.stream.rocketmq.bindings.input1.consumer.orderly=true
# Consumer 基于 TAGS 订阅，多个 tag 以 || 分割。默认值: empty（即空字符串""）
spring.cloud.stream.rocketmq.bindings.input1.consumer.tags=tagStr
# 异步消费消息模式下消费失败重试策略，默认值: 0
# -1 = 不重复，直接放入死信队列
#  0 = broker 控制重试策略
# >0 = client 控制重试策略
spring.cloud.stream.rocketmq.bindings.input1.consumer.delayLevelWhenNextConsume=0
# 同步消费消息模式下消费失败后再次消费的时间间隔。默认值: 1000
spring.cloud.stream.rocketmq.bindings.input1.consumer.suspendCurrentQueueTimeMillis=1000
# 更多配置参数，可查看源码：com.alibaba.cloud.stream.binder.rocketmq.properties.RocketMQConsumerProperties
# input2 的配置：
spring.cloud.stream.bindings.input2.destination=test-topic
spring.cloud.stream.bindings.input2.content-type=text/plain
spring.cloud.stream.bindings.input2.group=test-group2
spring.cloud.stream.bindings.input2.consumer.concurrency=20
spring.cloud.stream.bindings.input2.consumer.maxAttempts=1
spring.cloud.stream.rocketmq.bindings.input2.consumer.orderly=false
spring.cloud.stream.rocketmq.bindings.input2.consumer.tags=tagStr
# input3 的配置：
spring.cloud.stream.bindings.input3.destination=test-topic
spring.cloud.stream.bindings.input3.content-type=application/json
spring.cloud.stream.bindings.input3.group=test-group3
spring.cloud.stream.bindings.input3.consumer.concurrency=20
spring.cloud.stream.rocketmq.bindings.input3.consumer.tags=tagObj
# input4 的配置：
spring.cloud.stream.bindings.input4.destination=TransactionTopic
spring.cloud.stream.bindings.input4.content-type=text/plain
spring.cloud.stream.bindings.input4.group=transaction-group
spring.cloud.stream.bindings.input4.consumer.concurrency=5
# input5 的配置：
spring.cloud.stream.bindings.input5.destination=pull-topic
spring.cloud.stream.bindings.input5.content-type=text/plain
spring.cloud.stream.bindings.input5.group=pull-topic-group

########## Produce Config
# output1 的配置如下：
spring.cloud.stream.bindings.output1.destination=test-topic
spring.cloud.stream.bindings.output1.content-type=text/plain
# Producer group name。默认值为empty（即""）
spring.cloud.stream.rocketmq.bindings.output1.producer.group=my_group
# 是否发送事务消息。默认值为false
spring.cloud.stream.rocketmq.bindings.output1.producer.transactional=false
# 是否使用同步得方式发送消息。默认值为false
spring.cloud.stream.rocketmq.bindings.output1.producer.sync=true
# 更多配置参数，可查看源码：com.alibaba.cloud.stream.binder.rocketmq.properties.RocketMQProducerProperties

# output2 的配置如下：
spring.cloud.stream.bindings.output2.destination=test-topic
spring.cloud.stream.bindings.output2.content-type=application/json
spring.cloud.stream.rocketmq.bindings.output2.producer.group=myTxProducerGroup
spring.cloud.stream.rocketmq.bindings.output2.producer.transactional=true
spring.cloud.stream.rocketmq.bindings.output2.producer.sync=false
## RDS控制台：https://rdsnext.console.aliyun.com

# 数据源名称
spring.datasource.name="defaultDataSource"
# 数据库连接地址：
spring.datasource.url=jdbc:mysql://localhost:3306/blue?serverTimezone=UTC

# 数据库用户名&密码：
# 请在控制台中，对应数据库实例的"账号管理"功能下维护
spring.datasource.username=***
spring.datasource.password=***

# 数据库驱动：
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver# dubbo 服务扫描基础包路径
dubbo.scan.base-packages=com.SpringAuto

dubbo.protocol.id=dubbo
# Dubbo 服务暴露的协议配置，其中子属性 name 为协议名称，port 为协议端口（ -1 表示自增端口，从 20880 开始）
dubbo.protocol.name=dubbo
dubbo.protocol.port=-1

# 挂载到 Spring Cloud 注册中心
dubbo.registry.address=spring-cloud://localhost

# 用于服务消费方订阅服务提供方的应用名称的列表，若需订阅多应用，使用 "," 分割。 不推荐使用默认值为 "*"，它将订阅所有应用。
# 这里默认使用了当前应用名，请根据需要增加对应的应用名
dubbo.cloud.subscribed-services=SpringAuto

# Nacos 服务发现与注册配置，其中子属性 server-addr 指定 Nacos 服务器主机和端口
spring.cloud.nacos.discovery.server-addr= 127.0.0.1:8848

spring.datasource.name="storageDataSource"
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.url=jdbc:mysql://xxx:3306/fescar?useSSL=false&serverTimezone=UTC
spring.datasource.username=xxx
spring.datasource.password=xxx
spring.datasource.druid.max-active=20
spring.datasource.druid.min-idle=2
spring.datasource.druid.initial-size=2

seata.enabled=true
seata.service.vgroup-mapping=default
seata.service.grouplist=127.0.0.1:8091
seata.service.disable-global-transaction=false

## if use registry center
#seata.registry.type=nacos
#seata.registry.nacos.cluster=default
#seata.registry.nacos.server-addr=localhost
#
## if use config center
#seata.config.type=apollo
#seata.config.apollo.apollo-meta=http://192.168.1.204:8801
#seata.config.apollo.app-id=seata-server
# SMS控制台: https://dysms.console.aliyun.com
# 状态报告接收-队列名称
spring.cloud.alicloud.sms.report-queue-name=******
# 上行消息接收-队列名称
spring.cloud.alicloud.sms.up-queue-name=******# oss控制台: https://oss.console.aliyun.com
# oss云存储的EndPoint（地域节点）
alibaba.cloud.oss.endpoint=oss-cn-hangzhou.aliyuncs.com


management.health.sentinel.enabled=false

spring.cloud.sentinel.transport.dashboard=localhost:8080
spring.cloud.sentinel.eager=true
#spring.cloud.sentinel.http-method-specify=false

spring.cloud.sentinel.datasource.ds1.file.file=classpath: sentinel/flowrule.json
spring.cloud.sentinel.datasource.ds1.file.data-type=json
spring.cloud.sentinel.datasource.ds1.file.rule-type=flow

spring.cloud.sentinel.datasource.ds2.file.file=classpath: sentinel/degraderule.json
spring.cloud.sentinel.datasource.ds2.file.data-type=json
spring.cloud.sentinel.datasource.ds2.file.rule-type=degrade

spring.cloud.sentinel.datasource.ds3.file.file=classpath: sentinel/authority.json
spring.cloud.sentinel.datasource.ds3.file.rule-type=authority

spring.cloud.sentinel.datasource.ds4.file.file=classpath: sentinel/system.json
spring.cloud.sentinel.datasource.ds4.file.rule-type=system

spring.cloud.sentinel.datasource.ds5.file.file=classpath: sentinel/param-flow.json
spring.cloud.sentinel.datasource.ds5.file.rule-type=param_flow
